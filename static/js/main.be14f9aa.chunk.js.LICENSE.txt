/*!!! TEMP !!!!!!!!!!!!!!!!
    const _TEMP_prvBorderBottom = this.state._TEMP_NAV_BORDER_BOTTOM;
    if (_TEMP_prvBorderBottom)
      divNavAllClassName += " " + _TEMP_prvBorderBottom;
    //!!! TEMP !!!!!!!!!!!!!!!!
    
    TOP1;test+p:
    <div className={CLASS_NAVTOP_LAYOUT_SLEFT} onClick={this._update_TEMP_OPTIONS}>
      {_TEMP_TOP1_COLORS}
    </div>
    TOP2:
    <div className={CLASS_NAVTOP_LAYOUT_SLEFT}>
    {_TEMP_TOP2_COLORS}
    </div>
    */

/*!!! TEMP !!!!!!!!!!!!!!!!!!!!!!
  _update_TEMP_OPTIONS = (event) => {
    const eventCtrlKey = (event ? event.ctrlKey : false);
    if (debugEnabled)
      consoleLog("_update_TEMP_OPTIONS.eventCtrlKey: " + eventCtrlKey);

    if (eventCtrlKey) {
      const opt = this.state._show_TEMP_OPTIONS;
      this.setState({ _show_TEMP_OPTIONS: !opt });
    }
  }

  _TEMP_BG_NAV_TOP = (bgColor) => {
    _updateTEMP_BG_NAV_TOP(bgColor);
    this.setState({ _TEMP: true });
  }

  _TEMP_BG_BTN_TOP_VAR = (colorSfx) => {
    _updateTEMP_BG_BTN_TOP_VAR(colorSfx);
    this.setState({ _TEMP: true });
  }

  _TEMP_BG_NAV_MENU = (color) => {
    _updateTEMP_BG_NAV_MENU(color);
    this.setState({ _TEMP: true });
  }

  _TEMP_BG_CONTENT_TITLE = (color) => {
    _updateTEMP_BG_CONTENT_TITLE(color);
    this.setState({ _TEMP: true });
  }

  _TEMP_BG_BTN_MENU_VAR = (colorSfx) => {
    _updateTEMP_BG_BTN_MENU_VAR(colorSfx);
    this.setState({ _TEMP: true });
  }


  _TEMP_NAV_BORDER_BOTTOM = (cname) => {
    this.setState({ _TEMP_NAV_BORDER_BOTTOM: cname });
  }
  //!!! TEMP !!!!!!!!!!!!!!!!!!!!!!
  */

/*!!!DEPRECATED!!!
  //componentWillMount?(): void;
  componentWillMount() {
    if (debugEnabled)
      consoleLog("componentWillMount");
  }
  */

/*!!!DEPRECATED!!!
  //componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
  //!!! Move data fetching code or side effects to componentDidUpdate.
  componentWillReceiveProps(nextProps, nextContext) {
    if (debugEnabled)
      consoleLog("componentWillReceiveProps");
  }
  */

/*!!!DEPRECATED!!!
  //componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
  //!!! Move data fetching code or side effects to componentDidUpdate.
  componentWillUpdate(nextProps, nextState, nextContext) {
    if (debugEnabled)
      consoleLog("componentWillUpdate");
  }
  */

//!! this.render(); UseLess!
